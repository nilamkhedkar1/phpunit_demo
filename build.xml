<?xml version="1.0" encoding="UTF-8"?>      

<project name="newupload" default="build">                    
  <property name="composer.path" value="${basedir}/composer.phar" />
  <available property="composer.exists" file="${composer.path}" />
  <property name="workspace" value="${basedir}" />
  <property name="sourcedir" value="${basedir}/src" />
  <property name="builddir" value="${workspace}/app/build" />
  <property environment="env"/>
  <property name="buildNumber" value="${env.JOB_NAME}-${env.BUILD_NUMBER}"/>
  
  <property name="branchName" value="${env.JOB_NAME}-${env.GIT_BRANCH}"/>
  <property name="test" value="/home/vagrant/build.xml"/>
  <property name="buildexc" value="vagrant_two"/>
  <property name="homedir" value="${env.JENKINS_HOME}/jobs/" />

 
    <target name="build"
  depends="prepare,lint,phpunit,copyreport"/>
  
    

<target name="tools-parallel" description="Run tools in parallel">
    <parallel threadCount="2">
      <antcall target="phpcpd"/>
      <antcall target="phpcs-ci"/>
    </parallel>
  </target>

  <target name="clean" description="Cleanup build artifacts">
    <delete dir="${builddir}/api"/>
    <delete dir="${builddir}/api"/>
    <delete dir="${builddir}/code-browser"/>
    <delete dir="${builddir}/coverage"/>
    <delete dir="${builddir}/logs"/>
  </target>

  <target name="prepare" depends="clean" description="Prepare for build">
    <mkdir dir="${builddir}/api"/>
    <mkdir dir="${builddir}/code-browser"/>
    <mkdir dir="${builddir}/coverage"/>
    <mkdir dir="${builddir}/logs"/>
  </target>


  <target name="lint" description="Perform syntax check of sourcecode files">
    <apply executable="php" failonerror="true">
    <arg value="-l" />
    <fileset dir="${sourcedir}">
      <include name="**/*.php" />
      <modified />
    </fileset>
    <fileset dir="${basedir}/src/">
      <include name="**/*Test.php" />
      <modified />
    </fileset>
    </apply>
  </target>

  <!--target name="jslint" description="Perform syntax check of sourcecode files">
    <apply executable="jsl" failonerror="true">
    <arg value="-process" />
    <fileset dir="${basedir}/web/js/">
      <include name="**/*.js" />
      <modified />
    </fileset>
    </apply>
  </target -->
  
  <target name="phpcs" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="phpcs">
      <arg value="--standard=Symfony2" />
      <arg path="${sourcedir}" />
    </exec>
  </target>

  <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
    <exec executable="phpcs">
      <arg value="--report=checkstyle" />
      <arg value="--report-file=${builddir}/logs/checkstyle.xml" />
      <arg value="--standard=Symfony2" />
      <arg path="${sourcedir}" />
    </exec>
  </target>

  <target name="phpcpd" description="Find duplicate code using PHPCPD">
    <exec executable="/usr/local/bin/phpcpd">
      <arg value="--log-pmd" />
      <arg value="${builddir}/logs/pmd-cpd.xml" />
      <arg path="${sourcedir}" />
    </exec>
  </target>

   <target name="phpunit" description="Run unit tests with PHPUnit">
    <exec executable="docker" failonerror="true">
        <arg value="exec"/>
        <arg value="my-container"/>
        <arg value="phpunit"/>
        <arg value="-c" />
        <arg path="/home/newupload_new/app/phpunit.xml.dist" />
    </exec>
  </target>

 <target name="copyreport" description="copy report">
    <exec executable="docker" failonerror="true">
        <arg value="cp"/>
        <arg value="my-container:/home/newupload_new/app/build/logs/junit.xml"/>
        <arg value="/home/vagrant/workspace/docker-vagrant-slave/app/build/logs/"/>
    </exec>
  </target>


  
  
  <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
    <exec executable="/usr/local/bin/phpcb">
      <arg value="--log" />
      <arg path="${builddir}/logs" />
      <arg value="--source" />
      <arg path="${sourcedir}" />
      <arg value="--output" />
      <arg path="${builddir}/code-browser" />
    </exec>
  </target>
  
  <target name="vendors" depends="composer">
    <exec executable="${basedir}/composer.phar" failonerror="true">
     <arg value="install" />
    </exec>
  </target>

  <target name="composer" unless="composer.exists">
   <get src="http://getcomposer.org/composer.phar" dest="${composer.path}" />
    <chmod file="${composer.path}" perm="775" />
  </target>
  
 <target name="copylogs" description="copy the logs after build success">
   <get src="${BUILD_URL}/consoleText" dest="${homedir}/test/" />
    <chmod file="${composer.path}" perm="775" />
  </target>

  <target name="bldsuccess" description="Chedck for Build Success">

  <echo message="${workspace}"/>
  <echo message="${homedir}"/>
  <echo message="${buildexc}"/>
  </target>
</project>
